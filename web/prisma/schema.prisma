generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    gameRoomTemplates GameRoomTemplate[]
    gameRooms         GameRoom[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GameRoomTemplate {
    id                String   @id @default(cuid())
    title             String
    topic             String
    thumbnailImageUrl String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    createdById String
    createdBy   User   @relation(fields: [createdById], references: [id])

    questionTemplates QuestionTemplate[]
}

model GameRoom {
    id                String   @id @default(cuid())
    title             String
    topic             String
    thumbnailImageUrl String?
    code              String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    archivedAt DateTime?

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    maxPlayerCount Int

    players   GameRoomPlayer[]
    questions Question[]

    state GameRoomState?

    @@unique([code])
}

enum GameRoomStateStatus {
    IDLE
    IN_PROGRESS
    FINISHED
    FAILED
}

model GameRoomState {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    status GameRoomStateStatus @default(IDLE)

    failureReason String?

    gameRoomId String   @unique
    gameRoom   GameRoom @relation(fields: [gameRoomId], references: [id])

    questionIndex Int @default(0)

    startedAt DateTime?
    endedAt   DateTime?
}

model GameRoomPlayer {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    gameRoomId String
    gameRoom   GameRoom @relation(fields: [gameRoomId], references: [id])

    @@unique([name, gameRoomId])
}

enum QuestionType {
    MULTIPLE_CHOICE
}

model Question {
    id String @id @default(cuid())

    text String
    type QuestionType

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    multipleChoiceQuestion MultipleChoiceQuestion?

    gameRoomId String?
    gameRoom   GameRoom? @relation(fields: [gameRoomId], references: [id])

    @@unique([text, gameRoomId])
}

model MultipleChoiceQuestion {
    id String @id @default(cuid())

    questionId String   @unique
    question   Question @relation(fields: [questionId], references: [id])

    options   String[]
    answer    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model QuestionTemplate {
    id        String       @id @default(cuid())
    text      String
    type      QuestionType
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    multipleChoiceQuestionTemplate MultipleChoiceQuestionTemplate?

    gameRoomTemplateId String
    gameRoomTemplate   GameRoomTemplate? @relation(fields: [gameRoomTemplateId], references: [id])

    @@unique([text, gameRoomTemplateId])
}

model MultipleChoiceQuestionTemplate {
    id String @id @default(cuid())

    questionTemplateId String           @unique
    questionTemplate   QuestionTemplate @relation(fields: [questionTemplateId], references: [id])

    options   String[]
    answer    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
